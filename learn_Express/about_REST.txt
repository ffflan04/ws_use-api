/* ------ REST APIとは？ ------ */

そもそもREST と API は、別物

REST( REpresentational State Transfer )とは、
広く普及したWebのインフラをそのまま利用して、簡単な手順でWebサービスへのアクセスを可能にする仕組み。
つまり、RESTとは、設計思想であって、
REST-API とは、RESTという設計思想をもとに作られたAPI
RESTという設計思想を用いて作られたのが、Web。

アーキテクチャスタイル = REST
アーキテクチャ = サーバー、ブラウザ
実装 = Apache、Chrome

Webにおけるリソースとは、
・Web上に存在する名前を持ったあらゆる情報
・URLは、リソースの名前 + 住所
・複数のURLを持つリソースも存在する。


RESTを構成する６つのアーキテクチャスタイル

1.クライアント/サーバー：UIと処理を分割する。
2.ステートレスサーバー：クライアント状態をサーバーが管理しない。
    ステートフルサーバー = ログイン機能、Cookie などをそなえたwebアプリケーション
3.キャッシュ：サーバーから取得したリソースの再利用
4.統一インターフェース：操作可能なインターフェースを限定
5.階層化システム：システムを階層に分離
6.コードオンデマンド：クライアントでDL&実行
    ブラウザ上で動くJavascriptアニメーションなどは、サーバーに置いてある、
    Javascriptファイルを、クライアントPCにダウンロードして実行している。


URLの構成
簡単にいうと、ユーザー情報、ホスト名、ポート番号、パス、などの情報があるよ。
クエリパラメーター => id = value 形式の追加情報、? 以降の文字列は、
    クエリパラメーターという認識で大丈夫です。& で複数のクエリパラメーターを持たせることができる。
URLではASCII文字が使える(アルファベット、数字、記号)
日本語などの文字は、%エンコーディングが必要。UTF-8 など、( %E3%82%92%E6... )

URI = URL + URN 
URL = 住所, URLだけだと、ドメインを更新しないと情報にアクセスできなくなる
URN = 一意な名前, URLを補う役割, ドメイン名とは異なる独立した名前をつけることで、ドメイン切れなどによる、アクセス不可を回避できる。
けど、今は、このような、ドメイン切れによって、URLが使えなくなることがないように運用されている。
つまり、URIが保たれていることというのは、そのリソースにアクセスできる状態という訳です。
例えば、サイトをクリックしたら、リンク切れでリソースを表示できなかった、という事象こそが、URIが変わったということ

/* ------ クールなURIを設計しよう ------ */

1.プログラミング言語に依存した情報を含めない。
    ファイル拡張子、開発用ディレクトリ、大文字
2.メソッド名や、セッションIDを含めない
    セッションIDというのは、Cookieや、JWTなどに保存しておくのが主流。
3.URIには、「リソースを指し示す名詞」を使う。
4.なるべくシンプルかつ人間が読んで理解できるURIにしましょう。


URIの変更方法
301 Redirectを使ってURIの変更を知らせよう
301 Redirectを使うことで、ページランク( GoogleなどのSEO優先度 )を引き継ぐことができる。
・301 Redirect：恒久的なURIの変更
・302 Redirect：一時的なURIの変更

URI設定のコツ
バージョン番号を含める。
拡張子を含めて多言語対応のリソースを切り替える。
例：https://www.googleapis.com/youtube/v3
