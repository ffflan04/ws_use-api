/* ------ API とは？ ------ */

APIとは「アプリケーション・プログラミング・インターフェース
（Application Programming Interface）」の略称です。一言で表すと、
ソフトウェアやプログラム、Webサービスの間をつなぐインターフェースのことを指します。

APIの基本的なプロセスは「リクエスト（要求）」と「レスポンス（応答）」で構成されます。
リクエストをするのがAPI利用者で、レスポンスをするのがAPIの提供者。
リクエストとレスポンスに関するルールはAPIの提供者が定めます。
つまり、何のリクエストに対してどんなレスポンスを返すかということを提供者がAPIの設計段階で考え、
実装し、利用可能な状態にします。この設計次第でAPIのリクエストとレスポンスの関係は大きく変わるので、
「APIは●●をしてくれるもの」という決まりはありません。

ネットショップはAPIを通して「これからお客さまがカード情報を打ち込むから確認してくれ」と要求します。
顧客によって打ち込まれた情報はネットショップを通さず、直接カード会社のサーバに届き、情報が確認され、
ネットショップ宛に「カードを確認した。決済は完了」という連絡だけが送られます。
ネットショップはカード情報を管理することなく決済が確認できるので、顧客は安全に買い物ができるようになり、
ショップのサーバ管理コストも最低限に抑えられるというわけです。

/* ------ web API の説明 ------ */
apiの設計、運用は、バックエンドだけの領域ではなく、
フロントエンドにも、必要な技術になりつつある。

フロントエンドエンジニアが、apiの設計を知った方がいい理由

・マイクロサービスの流行
マイクロサービス = ネットワークトラフィックのルーティングやオンライン決済、医療結果分析といった単一機能のアプリケーションを指す。
マイクロサービスアーキテクチャー = 複数の独立した機能を組み合わせて１つの処理を実現するアプリケーションの構造
これらの、マイクロサービスは、それぞれ別のプログラミング言語を使って、開発することも可能
マイクロサービスアーキテクチャを構築する際に、APIが必要になってくる。

・便利なSaaSが増えた。
SaaS(Software as a Service)は、APIの利用が不可欠

・フロントエンドの役割が広がった。
簡単なAPIなら、フロントエンドの人がささっと書いちゃってね。くらいの感覚。
最近のフロントエンドの流行で言うと、JAMスタックという形式があります。
JamStack = Web 開発アーキテクチャ パターンおよびソリューション スタック。
> Javascript
> API
> マークアップ(HTML/CSS)


/* ------ Webの概要 ------ */


Webの用途

・webサイト -> 情報の閲覧
・webアプリケーション = 対話型
    ネイティブアプリ = データをデバイスにインストールして動かす。
    webアプリケーション = webブラウザ上で動くアプリケーション
・WebAPI = webブラウザ用の、Application Program Interface


分散システム -> webは、世界規模の分散システムと言われている。
    分散システムとは、複数のコンピューターが相互に処理を行なって、１つのシステムを構築することをいう。
集中システム


