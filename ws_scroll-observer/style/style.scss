@import url('https://fonts.googleapis.com/css2?family=Poppins:ital@1&display=swap');
/* 今日使うものは、Intersection Observer API です。*/
/* Intersection Observer API は特定の領域を監視して指定した要素が */
/* その領域に入ったかどうかを検知してくれる JavaScript の API です。*/
/* スクロールして要素が画面上に現れた時にアニメーションを開始したり、*/
/* スクロールスパイ（要素が表示されている位置に対応するリンクをハイライトする）*/
/* などの機能を比較的簡単で、軽量に実装できます。*/

/* 今回学んだこと */
/* 簡単なアニメーションは、transitionで実装しよう。*/
/* Scroll Revealライブラリのが楽に実装できる。けど、まぁ、*/
/* vanillaJS で実装するよりかは、楽ですね。*/
/* cssのプロパティを別セレクタに指定できる。*/
/* background-attachment: fixed; 背景画像の上にコンテンツを走らせることができる。 */
/* 連結クラス指定 = 二つのクラスを所持する要素にのみcssを当てます。*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    color: white;
}
@mixin BGI-set(){
    background-size: cover;
    background-position: center;
}
@mixin BGI-filter(){
    position: absolute;
    width: 100%;
    height: 500vh; /* section5個分の縦幅をセット */
    top: 0;
    left: 0;
    background-color: rgb(0, 0, 0,0.5);
}

body {
    @include BGI-set;
    width: 100%;
    height: 100%; /* height100%は、つまり、webサイトの縦幅に応じるということか？ */
    background-image: url(../images/main.jpg);
    background-attachment: fixed; /* 背景画像が固定され、コンテンツが、背景画像の上で動くようになります。*/

    .title {
        position: absolute;
        top: 15%;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1;
        font-size: 2.2rem;
        opacity: 0;
    }
    .title.active { /* 折角なんで、titleにも、アニメーションをつけるらしいです。*/
        opacity: 1;
        transition: all 3s;
    }
    section {
        position: relative;
        width: 100%;
        height: 100vh;
        overflow: hidden; /* section外は、他のsectionがあるから、侵入は禁止したいね。*/
        z-index: 1;

        h2 {
            position: absolute;
            font-size: 2.3rem;
            top: 70%;
            letter-spacing: 2px;
            opacity: 0;
            transition: all 0.2s;
        }
        h2.active {
            opacity: 1;
            z-index: 1;
            transition: opacity 3s;
        }
        .img-wrap {
            position: relative; /* なんで、ここrelativeなの？ */
            top: 40%;
            width: 1px; /* アニメーションで、widthを広げて、コンテンツを出現させます。*/
            height: 40%; /* ちゃんと、親要素heightの40%になってます！ */
            overflow: hidden;
            opacity: 0;

            .img {
                @include BGI-set;
                position: absolute;
                top: 0;
                left: 0;
                width: 40vw;
                height: 100%; /* 親要素のheightを継承する感じだね。*/
                transform: scale(1.6); /* アニメーションで普通のサイズに戻します */
            }
        }
        .img-wrap.active { /* 連結クラス指定 = 二つのクラスを所持する要素にcssを当てます。*/
            width: 40vw;
            opacity: 1;
            transition: opacity 1s, width 1.5s; /* transition個別に当てられるんだねぇ。*/
        }
        .img-wrap.active > .img { /* まぁー。activeクラスのアニメーションだよね。*/
            transform: scale(1);
            transition: ease-out transform 1s;
            /* Transform scale と、border-radius は、同時に実行できないみたい。 
            あー。そういうの言ってくれないと、ハマるヨォ。*/
        }
    }
}
body::after {
    content: "";
    @include BGI-filter;
}